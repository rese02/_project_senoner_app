/**
 * @fileoverview Firestore Security Rules for Senoner Sarteur Digital app.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing open read access for certain collections
 * with strict user-ownership and role-based access control for sensitive data. It prioritizes
 * security for write operations, ensuring that only authorized users can create, modify, or delete data.
 *
 * Data Structure:
 * - /users/{userId}: Stores personal user data, accessible only to the user themselves.
 * - /users/{userId}/preorders/{orderId}: Stores pre-orders for a specific user, accessible only to that user.
 * - /categories/{categoryId}: Stores product categories, publicly readable.
 * - /appConfig/main: Stores application-wide configuration. Publicly readable but only writable by privileged users.
 * - /notifications/{notificationId}: Stores notifications for all users, with write access restricted.
 *
 * Key Security Decisions:
 * - User data is strictly controlled via ownership checks.
 * - Pre-orders are secured under the user's data tree, ensuring only the user can manage their own orders.
 * - Categories and app configurations are publicly readable to facilitate data-driven UIs.
 * - Notifications are publicly accessible.
 *
 * Denormalization for Authorization:
 * - The Preorder entity denormalizes the customerName and customerId for authorization purposes, avoiding the need to look up user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user profiles. Only the authenticated user can read or write their own profile.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their own profile if request.auth.uid == 'user_abc'.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can access their own profile if request.auth.uid == 'user_abc'.
     * @deny (create, update, delete) - User with UID 'user_xyz' cannot modify user 'user_abc''s profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secures pre-orders under a user's profile. Only the authenticated user can manage their own pre-orders.
     * @path /users/{userId}/preorders/{orderId}
     * @allow (create) - User with UID 'user_abc' can create a pre-order under their profile.
     * @allow (get, list, update, delete) - User with UID 'user_abc' can access their own pre-orders.
     * @deny (create, update, delete) - User with UID 'user_xyz' cannot manage pre-orders under user 'user_abc''s profile.
     * @principle Enforces document ownership for all operations within a user's subcollection.
     */
    match /users/{userId}/preorders/{orderId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

       function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Allows public read access to categories. Write access is not permitted.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user, authenticated or not, can read category data.
     * @deny (create, update, delete) - No user can modify category data through the client.
     * @principle Provides open read access for public content while restricting write access.
     */
    match /categories/{categoryId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to the app configuration. Write access is not permitted.
     * @path /appConfig/main
     * @allow (get) - Any user, authenticated or not, can read the app configuration.
     * @deny (create, update, delete) - No user can modify the app configuration through the client.
     * @principle Provides open read access for public configuration data while restricting write access.
     */
    match /appConfig/main {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

      /**
       * @description Allows public read access to notifications. Write access is not permitted.
       * @path /notifications/{notificationId}
       * @allow (get, list) - Any user, authenticated or not, can read notification data.
       * @deny (create, update, delete) - No user can modify notification data through the client.
       * @principle Provides open read access for public content while restricting write access.
       */
      match /notifications/{notificationId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
      }
  }

  function isSignedIn() {
    return request.auth != null;
  }
}