/**
 * @file Firebase Security Rules for Senoner Sarteur Digital
 * @corePhilosophy This ruleset enforces a strict user-ownership model for user data,
 * public read access for categories, and restricts access to app configuration
 * to authenticated users.
 * @dataStructure
 * - /users/{userId}: Stores individual user profiles.
 * - /users/{userId}/preorders/{orderId}: Stores pre-orders associated with a specific user.
 * - /categories/{categoryId}: Stores product categories. Publicly readable.
 * - /appConfig/main: Singleton document for app-wide configuration.
 * - /notifications/{notificationId}: Stores notifications for users, accessible by the intended user.
 * @keySecurityDecisions
 * - Users can only access their own data under /users/{userId} and its subcollections.
 * - Category data is publicly readable but only writeable through the console.
 * - App configuration is readable by all authenticated users, but not writable through the client.
 * - Notifications are only accessible by the user to whom they are addressed.
 * @denormalizationForAuthorization N/A
 * @structuralSegregation N/A
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user profiles. Only the user themselves can read/write their own profile.
     * @path /users/{userId}
     * @allow (create) A user creating their own profile with matching UID.
     * @allow (get, list, update, delete) A user reading/updating their own profile.
     * @deny (create) A user attempting to create a profile with a different UID.
     * @deny (get, list, update, delete) A user attempting to read/update another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get, list: if isOwner(userId);
      allow create: if request.auth != null && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Secure user-specific pre-orders. Only the owning user can manage their pre-orders.
     * @path /users/{userId}/preorders/{orderId}
     * @allow (create) A user creating a pre-order under their own user ID.
     * @allow (get, list, update, delete) A user reading/updating their own pre-orders.
     * @deny (create) A user attempting to create a pre-order under another user's ID.
     * @deny (get, list, update, delete) A user attempting to read/update another user's pre-orders.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/preorders/{orderId} {
        function isOwner(userId) {
            return request.auth != null && request.auth.uid == userId;
        }

        function isExistingOwner(userId) {
            return isOwner(userId) && resource != null;
        }

      allow get, list: if isOwner(userId);
      allow create: if isOwner(userId);
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Allow public read access to categories. Write access should be managed via other means.
     * @path /categories/{categoryId}
     * @allow (get, list) Any user can read category data.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Public read access with restricted writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Secure the app configuration singleton document. Authenticated users can read, but no client writes.
     * @path /appConfig/main
     * @allow (get, list) Any authenticated user can read the app configuration.
     * @deny (create, update, delete) No client-side writes allowed.
     * @principle Restricts write access to sensitive configuration data.
     */
    match /appConfig/{document} {
      function isSignedIn() {
        return request.auth != null;
      }
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

    /**
     * @description Secure notifications. Only the intended user can access their own notifications.
     * @path /notifications/{notificationId}
     * @allow (get, list) A user can read their own notifications.
     *  @allow (create) A user creating their own notification.
     * @allow (update, delete) A user can update and delete their own notifications.
     * @deny (get, list) A user attempting to read another user's notifications.
     * @principle Enforces ownership for notifications.
     */
    match /notifications/{notificationId} {
      function isOwner(notificationId) {
        return request.auth != null && request.auth.uid == resource.data.userId;
      }

      function isCreatingOwner() {
        return request.auth != null && request.auth.uid == request.resource.data.userId;
      }

      allow get: if isOwner(notificationId);
      allow list: if false;
      allow create: if isCreatingOwner();
      allow update: if isOwner(notificationId);
      allow delete: if isOwner(notificationId);
    }
  }
}