rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages user profile data, ensuring only the user can read or write their own data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user_abc' can create their profile with matching ID.
     *          Request: auth.uid == 'user_abc'
     * @allow (get, list, update, delete) - User with UID 'user_abc' can read, update, and delete their profile.
     *          Request: auth.uid == 'user_abc'
     * @deny (create) - User with UID 'user_xyz' cannot create a profile for 'user_abc'.
     *          Request: auth.uid == 'user_xyz', resource.data.id == 'user_abc'
     * @deny (update, delete) - User with UID 'user_xyz' cannot update or delete the profile of 'user_abc'.
     *          Request: auth.uid == 'user_xyz'
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isOwner(userId);
      allow list: if false; // Listing all users is not permitted

      allow create: if request.auth.uid == userId && request.resource.data.id == request.auth.uid;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Manages product categories, allowing public read access.
     * @path /categories/{categoryId}
     * @allow (get, list) - Any user (or no user) can read product categories.
     *          Request: No authentication required.
     * @deny (create, update, delete) - No user can create, update, or delete product categories.
     *          Request: Any user (or admin) attempting to write.
     * @principle Public read access with restricted writes.
     */
    match /categories/{categoryId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages product information, allowing public read access.
     * @path /products/{productId}
     * @allow (get, list) - Any user can read product information.
     *          Request: No authentication required.
     * @deny (create, update, delete) - No user can create, update, or delete product information.
     *          Request: Any user (or admin) attempting to write.
     * @principle Public read access with restricted writes.
     */
    match /products/{productId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages pre-orders for a specific user, ensuring only the user can access their pre-orders.
     * @path /users/{userId}/preOrders/{preOrderId}
     * @allow (create, get, list, update, delete) - The user with UID 'user_abc' can create, read, update, and delete their own pre-orders.
     *          Request: auth.uid == 'user_abc'
     * @deny (create, get, list, update, delete) - The user with UID 'user_xyz' cannot access pre-orders for 'user_abc'.
     *          Request: auth.uid == 'user_xyz'
     * @principle Restricts access to a user's own pre-order data.
     */
    match /users/{userId}/preOrders/{preOrderId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Manages application-wide configurations, restricting write access.
     * @path /appConfig/{appConfigId}
     * @allow (get, list) - Any user can read application configurations.
     *          Request: No authentication required.
     * @deny (create, update, delete) - No user can create, update, or delete application configurations.
     *          Request: Any user attempting to write.
     * @principle Public read access with restricted writes.
     */
    match /appConfig/{appConfigId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Manages notifications for a specific user, ensuring only the user can access their notifications.
     * @path /users/{userId}/notifications/{notificationId}
     * @allow (create, get, list, update, delete) - The user with UID 'user_abc' can create, read, update, and delete their own notifications.
     *          Request: auth.uid == 'user_abc'
     * @deny (create, get, list, update, delete) - The user with UID 'user_xyz' cannot access notifications for 'user_abc'.
     *          Request: auth.uid == 'user_xyz'
     * @principle Restricts access to a user's own notification data.
     */
    match /users/{userId}/notifications/{notificationId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Manages the loyalty card for a specific user, ensuring only the user can access their loyalty card.
     * @path /users/{userId}/loyaltyCard/{loyaltyCardId}
     * @allow (create, get, list, update, delete) - The user with UID 'user_abc' can create, read, update, and delete their own loyalty card.
     *          Request: auth.uid == 'user_abc'
     * @deny (create, get, list, update, delete) - The user with UID 'user_xyz' cannot access the loyalty card for 'user_abc'.
     *          Request: auth.uid == 'user_xyz'
     * @principle Restricts access to a user's own loyalty card data.
     */
    match /users/{userId}/loyaltyCard/{loyaltyCardId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }
      allow get, list, create, update, delete: if isOwner(userId);
    }

    /**
     * @description Checks for admin roles based on document existence.
     * @path /roles_admin/{userId}
     * @allow (get) - Any user can check if an admin role exists.
     *          Request: No authentication required.
     * @allow (create) - Only the user being granted admin can create this document.
     * @deny (update, delete) - No one can update or delete this document.
     * @principle Restricts admin role creation to the user being granted the role.
     */
    match /roles_admin/{userId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        allow get: if true; // Anyone can check for admin existence.
        allow list: if false; // Listing all admins is not permitted

        allow create: if isOwner(userId) && request.resource.data.id == request.auth.uid; // Only assign yourself as admin
        allow update: if false; // no one can change it
        allow delete: if false; // no one can delete it
    }
  }
}